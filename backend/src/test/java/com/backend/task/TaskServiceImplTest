package com.backend.service.implementation;

import com.backend.domain.Task;
import com.backend.domain.User;
import com.backend.enums.TaskPriority;
import com.backend.enums.TaskStatus;
import com.backend.payload.request.CreateTaskRequest;
import com.backend.repository.TaskRepository;
import com.backend.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.time.LocalDateTime;

import static org.assertj.core.api.Assertions.assertThat;

@Testcontainers
@SpringBootTest
@ExtendWith(SpringExtension.class)
public class TaskServiceImplTest {

    @Container
    static PostgreSQLContainer<?> postgresContainer = new PostgreSQLContainer<>("postgres:15")
            .withDatabaseName("testdb")
            .withUsername("test")
            .withPassword("test");

    @DynamicPropertySource
    static void overrideProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgresContainer::getJdbcUrl);
        registry.add("spring.datasource.username", postgresContainer::getUsername);
        registry.add("spring.datasource.password", postgresContainer::getPassword);
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "create-drop");
    }

    @Autowired
    private TaskServiceImpl taskService;

    @Autowired
    private TaskRepository taskRepository;

    @Autowired
    private UserRepository userRepository;

    @MockBean
    private BaseServiceImpl baseService;

    private User testUser;

    @BeforeEach
    public void setup() {
        taskRepository.deleteAll();
        userRepository.deleteAll();

        testUser = new User();
        testUser.setUsername("creatorUser");
        testUser.setEmail("creator@example.com");
        testUser.setPassword("password");
        testUser = userRepository.save(testUser);

        Mockito.when(baseService.getUserFromSecurityContext()).thenReturn(testUser);
    }

    @Test
    public void testCreateTask() {
        User assignee = new User();
        assignee.setUsername("assigneeUser");
        assignee.setEmail("assignee@example.com");
        assignee.setPassword("password");
        assignee = userRepository.save(assignee);

        CreateTaskRequest request = new CreateTaskRequest();
        request.setTitle("Test Task");
        request.setDescription("Test Description");
        request.setAssigneeId(assignee.getId());
        request.setStatus(TaskStatus.TODO);
        request.setPriority(TaskPriority.MEDIUM);

        ResponseEntity<?> response = taskService.createTask(request);
        assertThat(response.getStatusCode().is2xxSuccessful()).isTrue();

        Task savedTask = (Task) response.getBody();
        assertThat(savedTask).isNotNull();
        assertThat(savedTask.getTitle()).isEqualTo("Test Task");
        assertThat(savedTask.getAssignee().getId()).isEqualTo(assignee.getId());
        assertThat(savedTask.getCreator().getId()).isEqualTo(testUser.getId());
    }
}
